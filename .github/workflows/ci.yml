name: CI проекта

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # ОБЩИЙ ЭТАП СБОРКИ С ИСПОЛЬЗОВАНИЕМ build.sh
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Настройка Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Кэширование Python зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Кэширование npm зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Использование скрипта build.sh для сборки проекта
        run: |
          chmod +x ./build.sh
          ./build.sh build

  # ЭТАП ТЕСТИРОВАНИЯ БЭКЕНДА
  backend-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Кэширование Python зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Запуск сервисов через Docker Compose
        run: |
          # Используем существующий docker-compose.yml, но запускаем только необходимые сервисы
          docker compose up -d postgres minio

          # Ждем, пока сервисы запустятся
          echo "Ожидание 20 секунд, пока сервисы запустятся..."
          sleep 20

      - name: Проверка статуса сервисов
        run: |
          docker ps
          docker compose logs

      - name: Запуск тестов с использованием сервисов
        run: |
          cd backend
          # Устанавливаем переменные окружения для тестов, чтобы использовать поднятые сервисы
          export USE_MINIO=true
          export MINIO_ENDPOINT=localhost:9000
          export MINIO_ACCESS_KEY=minioadmin
          export MINIO_SECRET_KEY=minioadmin
          export MINIO_SECURE=false
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5432
          export POSTGRES_USER=pguser
          export POSTGRES_PASSWORD=pgpassword
          export POSTGRES_DB=pgdatabase

          # Запускаем тесты
          pytest tests/ -v --cov=app

      - name: Генерация отчета о покрытии
        run: |
          cd backend
          pytest tests/ --cov=app --cov-report=xml

      - name: Загрузка отчета о покрытии
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage.xml

      - name: Остановка сервисов
        run: |
          docker compose down -v
        if: always() # Убедимся, что сервисы остановятся даже если тесты завершились с ошибкой
  
  frontend-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Настройка Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Кэширование npm зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Установка зависимостей
        run: |
          cd frontend
          npm ci

      - name: Запуск тестов
        run: |
          cd frontend
          npm test

      - name: Загрузка отчета о покрытии
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage
          if-no-files-found: error
